<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
	Copyright 2012
	Ubiquitous Knowledge Processing (UKP) Lab
	Technische Universität Darmstadt

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
-->
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
	version="2.4">

	<display-name>WebAnno</display-name>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/applicationContext.xml
			/WEB-INF/rest-servlet.xml
			/WEB-INF/databaseContext.xml
            /WEB-INF/docs.xml
		</param-value>
	</context-param>

	<!--  
		Disable JavaMelody by default. Can be enabled by setting the system property
		"javamelody.disabled" to "false" when starting the servlet container
	-->
	<context-param>
		<param-name>javamelody.disabled</param-name>
		<param-value>true</param-value>
	</context-param>

	<!--  
		Configure JavaMelody URL
	-->
	<context-param>
		<param-name>javamelody.monitoring-path</param-name>
		<param-value>/admin/monitoring</param-value>
	</context-param>
		
	<!--
		- Listeners react to servlet content events and initialize resources.
	-->
	<context-param>
		<param-name>contextInitializerClasses</param-name>
		<param-value>de.tudarmstadt.ukp.clarin.webanno.webapp.security.preauth.WebAnnoApplicationContextInitializer</param-value>
	</context-param>
	<!-- Make sure the Spring context is always available -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Set up the JavaMelody monitoring tool -->
	<listener>
		<listener-class>net.bull.javamelody.SessionListener</listener-class>
	</listener>

	<!--
		Filters are applied for each web request in the order they are defined
		here. This order mandatory for the application to function correctly.
	-->
	<!-- 1) Firewall: check if request is permitted, otherwise ask for authentication -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

    <!--
        2) Make username accessible to logging framework
    -->
    <filter>
      <filter-name>logging</filter-name>
      <filter-class>de.tudarmstadt.ukp.clarin.webanno.webapp.WebAnnoLoggingFilter</filter-class>
    </filter>

	<!--
		3) Handle access to the monitoring URL - after the security check so
		only authenticated users can access this URL.
	-->
	<filter>
		<filter-name>monitoring</filter-name>
		<filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
	</filter>

	<!--
		4) Make sure we have one JPA session/transaction per request. Closes
		session at the end, without this, changed data may not be automatically saved to the DB.
	-->
	<filter>
		<filter-name>opensessioninview</filter-name>
		<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
	</filter>


	<!--
		5) Pass control to Wicket
	-->
	<filter>
		<filter-name>wicket.filter</filter-name>
		<filter-class>org.apache.wicket.protocol.http.WicketFilter</filter-class>
		<init-param>
			<param-name>applicationFactoryClassName</param-name>
			<param-value>org.apache.wicket.spring.SpringWebApplicationFactory</param-value>
		</init-param>
		<init-param>
			<param-name>configuration</param-name>
			<param-value>deployment</param-value>
		</init-param>
		<!--
			- The remote API is not handled by Wicket, but by Spring
		-->
		<init-param>
			<param-name>ignorePaths</param-name>
			<param-value>api/</param-value>
		</init-param>
	</filter>

	<!--
		- The remote API is not handled by Wicket, but by Spring
	-->
	<servlet>
		<servlet-name>rest</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

    <filter-mapping>
        <filter-name>logging</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
  
	<filter-mapping>
		<filter-name>monitoring</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>opensessioninview</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>wicket.filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--
		- The remote API is not handled by Wicket, but by Spring
	-->
	<servlet-mapping>
		<servlet-name>rest</servlet-name>
		<url-pattern>/api/*</url-pattern>
	</servlet-mapping>
</web-app>
